<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.OrdersMapper">

    <resultMap id="BaseResultMap" type="com.example.model.entity.Orders">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="orderNo" column="order_no" jdbcType="VARCHAR"/>
        <result property="userId" column="user_id" jdbcType="BIGINT"/>
        <result property="totalAmount" column="total_amount" jdbcType="DECIMAL"/>
        <result property="payAmount" column="pay_amount" jdbcType="DECIMAL"/>
        <result property="status" column="status" jdbcType="TINYINT"/>
        <result property="receiverName" column="receiver_name" jdbcType="VARCHAR"/>
        <result property="receiverPhone" column="receiver_phone" jdbcType="VARCHAR"/>
        <result property="receiverAddress" column="receiver_address" jdbcType="VARCHAR"/>
        <result property="paymentTime" column="payment_time" jdbcType="TIMESTAMP"/>
        <result property="deliveryTime" column="delivery_time" jdbcType="TIMESTAMP"/>
        <result property="receiveTime" column="receive_time" jdbcType="TIMESTAMP"/>
        <result property="paymentMethod" column="payment_method" jdbcType="TINYINT"/>
        <result property="logisticsCompany" column="logistics_company" jdbcType="VARCHAR"/>
        <result property="trackingNumber" column="tracking_number" jdbcType="VARCHAR"/>
        <result property="commentStatus" column="comment_status" jdbcType="TINYINT"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="timezone" column="timezone" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,order_no,user_id,
        total_amount,pay_amount,status,
        receiver_name,receiver_phone,receiver_address,
        payment_time,delivery_time,receive_time,
        payment_method,logistics_company,tracking_number,
        comment_status,create_time,update_time,
        timezone
    </sql>

    <!-- 用户订单查询 -->
    <select id="selectByUserId" resultMap="BaseResultMap">
        SELECT *
        FROM orders
        WHERE user_id = #{userId}
    </select>

    <!-- 分页查询 -->
    <select id="selectPage" resultMap="BaseResultMap">
        SELECT *
        FROM orders
        ORDER BY create_time DESC
    </select>

    <!-- 订单号查询 -->
    <select id="selectByOrderNo" resultMap="BaseResultMap">
        SELECT *
        FROM orders
        WHERE order_no = #{orderNo}
    </select>

    <!-- 插入订单 -->
    <insert id="insertOrder" parameterType="com.example.model.entity.Orders" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO orders (
            order_no, user_id, total_amount, pay_amount, status,
            receiver_name, receiver_phone, receiver_address,
            payment_time, delivery_time, receive_time,
            payment_method, logistics_company, tracking_number,
            comment_status, create_time, update_time, timezone
        ) VALUES (
            #{orderNo}, #{userId}, #{totalAmount}, #{payAmount}, #{status},
            #{receiverName}, #{receiverPhone}, #{receiverAddress},
            #{paymentTime}, #{deliveryTime}, #{receiveTime},
            #{paymentMethod}, #{logisticsCompany}, #{trackingNumber},
            #{commentStatus}, NOW(), NOW(), #{timezone}
        )
    </insert>

    <!-- 更新状态 -->
    <update id="updateOrderStatus">
        UPDATE orders
        SET status = #{status},
            update_time = NOW()
        WHERE order_no = #{orderNo}
    </update>

    <!-- 删除订单 -->
    <delete id="deleteOrder">
        DELETE
        FROM orders
        WHERE id = #{id}
    </delete>

    <!-- 根据订单状态查询 -->
    <select id="selectByStatus" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM orders
        WHERE status = #{status}
        ORDER BY create_time DESC
    </select>

    <!-- 查询用户特定状态的订单 -->
    <select id="selectByUserIdAndStatus" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM orders
        WHERE user_id = #{userId}
        AND status = #{status}
        ORDER BY create_time DESC
    </select>

    <!-- 根据时间范围查询订单 -->
    <select id="selectByTimeRange" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM orders
        WHERE create_time BETWEEN #{startTime} AND #{endTime}
        ORDER BY create_time DESC
    </select>

    <!-- 获取订单统计数据 -->
    <select id="getOrderStatistics" resultType="java.util.Map">
        SELECT status, COUNT(*) as count, SUM(pay_amount) as total_amount
        FROM orders
        <if test="userId != null">
            WHERE user_id = #{userId}
        </if>
        GROUP BY status
        ORDER BY status
    </select>

    <!-- 查询最近创建的订单 -->
    <select id="selectRecentOrders" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM orders
        ORDER BY create_time DESC
        LIMIT #{limit}
    </select>

    <!-- 更新订单支付信息 -->
    <update id="updatePaymentInfo">
        UPDATE orders
        SET payment_method = #{paymentMethod},
            payment_time = #{paymentTime},
            status = 2, <!-- 假设2为已支付状态 -->
            update_time = NOW()
        WHERE order_no = #{orderNo}
        AND status = 1 <!-- 假设1为待支付状态 -->
    </update>

    <!-- 更新订单物流信息 -->
    <update id="updateShippingInfo">
        UPDATE orders
        SET logistics_company = #{logisticsCompany},
            tracking_number = #{trackingNumber},
            delivery_time = NOW(),
            status = 3, <!-- 假设3为已发货状态 -->
            update_time = NOW()
        WHERE order_no = #{orderNo}
        AND status = 2 <!-- 假设2为已支付状态 -->
    </update>

    <!-- 查询订单详情（包含订单项） -->
    <select id="selectOrderDetail" resultType="java.util.Map">
        SELECT o.*, 
               p.name as product_name, 
               p.images as product_images,
               oi.quantity, 
               oi.price as item_price, 
               oi.total_price as item_total_price
        FROM orders o
        JOIN order_item oi ON o.id = oi.order_id
        JOIN products p ON oi.product_id = p.id
        WHERE o.order_no = #{orderNo}
    </select>

    <!-- 取消订单 -->
    <update id="cancelOrder">
        UPDATE orders
        SET status = 4, <!-- 4表示已取消 -->
            cancel_reason = #{cancelReason},
            update_time = NOW()
        WHERE order_no = #{orderNo}
        AND status = 0 <!-- 0表示待支付 -->
    </update>

    <!-- 确认收货 -->
    <update id="confirmReceive">
        UPDATE orders
        SET status = 3, <!-- 3表示已完成 -->
            receive_time = NOW(),
            update_time = NOW()
        WHERE order_no = #{orderNo}
        AND status = 2 <!-- 2表示已发货 -->
    </update>

    <!-- 申请退款 -->
    <update id="applyRefund">
        UPDATE orders
        SET status = 5, <!-- 5表示退款中 -->
            refund_reason = #{refundReason},
            update_time = NOW()
        WHERE order_no = #{orderNo}
        AND (status = 1 OR status = 2) <!-- 1表示已支付，2表示已发货 -->
    </update>

    <!-- 完成订单 -->
    <update id="completeOrder">
        UPDATE orders
        SET status = 3, <!-- 3表示已完成 -->
            update_time = NOW()
        WHERE order_no = #{orderNo}
        AND status = 2 <!-- 2表示已发货 -->
    </update>

    <!-- 查询超时未支付订单 -->
    <select id="selectTimeoutOrders" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM orders
        WHERE status = 0 <!-- 0表示待支付 -->
        AND create_time &lt; #{timeoutTime}
    </select>

    <!-- 统计超时未支付订单数量 -->
    <select id="countTimeoutOrders" resultType="int">
        SELECT COUNT(*)
        FROM orders
        WHERE status = 0 <!-- 0表示待支付 -->
        AND create_time &lt; #{timeoutTime}
    </select>

    <!-- 自动取消超时未支付订单 -->
    <update id="autoCancelTimeoutOrders">
        UPDATE orders
        SET status = 4, <!-- 4表示已取消 -->
            cancel_reason = '超时未支付自动取消',
            update_time = NOW()
        WHERE status = 0 <!-- 0表示待支付 -->
        AND create_time &lt; #{timeoutTime}
    </update>

    <!-- 根据用户ID查询各状态订单数量 -->
    <select id="countOrdersByStatus" resultType="java.util.Map">
        SELECT status, COUNT(*) as count
        FROM orders
        WHERE user_id = #{userId}
        GROUP BY status
    </select>

    <!-- 查询订单销售统计（按日期） -->
    <select id="getOrderSalesByDate" resultType="java.util.Map">
        SELECT 
            DATE(create_time) as date,
            COUNT(*) as order_count,
            SUM(pay_amount) as total_sales
        FROM orders
        WHERE status >= 1 <!-- 已支付及后续状态 -->
        AND create_time BETWEEN #{startDate} AND #{endDate}
        GROUP BY DATE(create_time)
        ORDER BY date ASC
    </select>

</mapper>
