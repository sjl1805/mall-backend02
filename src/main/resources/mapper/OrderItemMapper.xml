<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.OrderItemMapper">

    <resultMap id="BaseResultMap" type="com.example.model.entity.OrderItem">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="orderId" column="order_id" jdbcType="BIGINT"/>
        <result property="productId" column="product_id" jdbcType="BIGINT"/>
        <result property="productName" column="product_name" jdbcType="VARCHAR"/>
        <result property="productImage" column="product_image" jdbcType="VARCHAR"/>
        <result property="price" column="price" jdbcType="DECIMAL"/>
        <result property="quantity" column="quantity" jdbcType="INTEGER"/>
        <result property="totalAmount" column="total_amount" jdbcType="DECIMAL"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, order_id, product_id, product_name, product_image, price, quantity, total_amount, create_time, update_time
    </sql>

    <!-- 根据订单ID查询订单商品 -->
    <select id="selectByOrderId" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM order_item
        WHERE order_id = #{orderId}
    </select>

    <!-- 分页查询订单商品 -->
    <select id="selectPage" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM order_item
        ORDER BY create_time DESC
    </select>

    <!-- 根据ID查询订单商品 -->
    <select id="selectById" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM order_item
        WHERE id = #{id}
    </select>

    <!-- 插入新订单商品 -->
    <insert id="insertOrderItem" parameterType="com.example.model.entity.OrderItem">
        INSERT INTO order_item (order_id, product_id, product_name, product_image, price, quantity, total_amount,
                                create_time, update_time)
        VALUES (#{orderId}, #{productId}, #{productName}, #{productImage}, #{price}, #{quantity}, #{totalAmount},
                NOW(), NOW())
    </insert>

    <!-- 更新订单商品信息 -->
    <update id="updateOrderItem" parameterType="com.example.model.entity.OrderItem">
        UPDATE order_item
        SET order_id      = #{orderId},
            product_id    = #{productId},
            product_name  = #{productName},
            product_image = #{productImage},
            price         = #{price},
            quantity      = #{quantity},
            total_amount  = #{totalAmount},
            update_time   = NOW()
        WHERE id = #{id}
    </update>

    <!-- 根据ID删除订单商品 -->
    <delete id="deleteOrderItem">
        DELETE
        FROM order_item
        WHERE id = #{id}
    </delete>

    <!-- 批量插入订单商品 -->
    <insert id="batchInsertOrderItems" parameterType="java.util.List">
        INSERT INTO order_item (order_id, product_id, product_name, product_image, price, quantity, total_amount,
                                create_time, update_time)
        VALUES
        <foreach collection="orderItems" item="item" separator=",">
            (#{item.orderId}, #{item.productId}, #{item.productName}, #{item.productImage}, 
             #{item.price}, #{item.quantity}, #{item.totalAmount}, NOW(), NOW())
        </foreach>
    </insert>

    <!-- 根据订单ID批量删除订单商品 -->
    <delete id="deleteByOrderId">
        DELETE FROM order_item
        WHERE order_id = #{orderId}
    </delete>

    <!-- 根据商品ID查询订单商品 -->
    <select id="selectByProductId" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM order_item
        WHERE product_id = #{productId}
        ORDER BY create_time DESC
    </select>

    <!-- 统计商品销量 -->
    <select id="countProductSales" resultType="int">
        SELECT COALESCE(SUM(quantity), 0)
        FROM order_item oi
        JOIN orders o ON oi.order_id = o.id
        WHERE oi.product_id = #{productId}
        AND <![CDATA[ o.status >= 2 ]]>  <!-- 假设状态2以上为已支付订单 -->
        <if test="startTime != null">
            AND oi.create_time >= #{startTime}
        </if>
        <if test="endTime != null">
            AND oi.create_time <= #{endTime}
        </if>
    </select>

    <!-- 查询热销商品 -->
    <select id="selectHotProducts" resultType="java.util.Map">
        SELECT oi.product_id, oi.product_name, SUM(oi.quantity) as sales_count, 
               AVG(oi.price) as avg_price
        FROM order_item oi
        JOIN orders o ON oi.order_id = o.id
        WHERE <![CDATA[ o.status >= 2 ]]>  <!-- 假设状态2以上为已支付订单 -->
        <if test="startTime != null">
            AND oi.create_time >= #{startTime}
        </if>
        <if test="endTime != null">
            AND oi.create_time <= #{endTime}
        </if>
        GROUP BY oi.product_id, oi.product_name
        ORDER BY sales_count DESC
        LIMIT #{limit}
    </select>

    <!-- 查询订单项关联的商品详情 -->
    <select id="selectOrderItemsWithProductDetails" resultType="java.util.Map">
        SELECT oi.*, p.description, p.images, p.price as current_price, 
               p.stock, c.name as category_name
        FROM order_item oi
        LEFT JOIN products p ON oi.product_id = p.id
        LEFT JOIN product_category c ON p.category_id = c.id
        WHERE oi.order_id = #{orderId}
    </select>

    <!-- 查询用户购买过的商品ID列表 -->
    <select id="getUserPurchasedProductIds" resultType="java.lang.Long">
        SELECT DISTINCT oi.product_id
        FROM order_item oi
        JOIN orders o ON oi.order_id = o.id
        WHERE o.user_id = #{userId}
        AND <![CDATA[ o.status >= 2 ]]>  <!-- 已支付完成的订单 -->
        ORDER BY o.create_time DESC
        LIMIT #{limit}
    </select>

    <!-- 获取订单项状态汇总 -->
    <select id="getOrderItemStatusSummary" resultType="java.util.Map">
        SELECT 
            COUNT(*) as total_items,
            SUM(CASE WHEN pr.id IS NOT NULL THEN 1 ELSE 0 END) as reviewed_items,
            SUM(CASE WHEN r.id IS NOT NULL THEN 1 ELSE 0 END) as refunded_items
        FROM order_item oi
        LEFT JOIN product_review pr ON oi.id = pr.order_item_id
        LEFT JOIN refund r ON oi.id = r.order_item_id
        WHERE oi.order_id = #{orderId}
    </select>

    <!-- 更新订单项评价状态 -->
    <update id="updateReviewStatus">
        UPDATE order_item
        SET review_status = #{reviewStatus},
            update_time = NOW()
        WHERE id = #{id}
    </update>

    <!-- 更新订单项退款状态 -->
    <update id="updateRefundStatus">
        UPDATE order_item
        SET refund_status = #{refundStatus},
            update_time = NOW()
        WHERE id = #{id}
    </update>
</mapper>
