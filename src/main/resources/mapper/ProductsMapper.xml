<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.ProductsMapper">

    <resultMap id="BaseResultMap" type="com.example.model.entity.Products">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="categoryId" column="category_id" jdbcType="BIGINT"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="description" column="description" jdbcType="VARCHAR"/>
        <result property="price" column="price" jdbcType="DECIMAL"/>
        <result property="stock" column="stock" jdbcType="INTEGER"/>
        <result property="images" column="images" jdbcType="OTHER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="status" column="status" jdbcType="TINYINT"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,category_id,name,
        description,price,stock,
        images,create_time,update_time,
        status
    </sql>

    <!-- 根据商品名称模糊查询 -->
    <select id="selectByNameLike" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE name LIKE CONCAT('%', #{name}, '%')
        AND status = 1
        ORDER BY create_time DESC
    </select>

    <!-- 分页查询商品 -->
    <select id="selectPage" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE status = 1
        ORDER BY create_time DESC
    </select>

    <!-- 根据ID查询商品 -->
    <select id="selectById" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE id = #{id}
    </select>

    <!-- 根据商品名称查询商品 -->
    <select id="selectByName" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE name = #{name}
        AND status = 1
    </select>

    <!-- 插入新商品 -->
    <insert id="insertProduct" parameterType="com.example.model.entity.Products">
        INSERT INTO products (category_id, name, description, price, stock, images, create_time, update_time, status)
        VALUES (#{categoryId}, #{name}, #{description}, #{price}, #{stock}, #{images}, NOW(), NOW(), #{status})
    </insert>

    <!-- 更新商品信息 -->
    <update id="updateProduct" parameterType="com.example.model.entity.Products">
        UPDATE products
        SET category_id = #{categoryId},
            name        = #{name},
            description = #{description},
            price       = #{price},
            stock       = #{stock},
            images      = #{images},
            update_time = NOW(),
            status      = #{status}
        WHERE id = #{id}
    </update>

    <!-- 根据ID删除商品 -->
    <delete id="deleteProduct">
        DELETE
        FROM products
        WHERE id = #{id}
    </delete>

    <!-- 根据分类ID查询商品 -->
    <select id="selectByCategoryId" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE category_id = #{categoryId}
        AND status = 1
        ORDER BY create_time DESC
    </select>

    <!-- 根据价格范围查询商品 -->
    <select id="selectByPriceRange" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE price BETWEEN #{minPrice} AND #{maxPrice}
        AND status = 1
        ORDER BY price
    </select>

    <!-- 根据状态查询商品 -->
    <select id="selectByStatus" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE status = #{status}
        ORDER BY create_time DESC
    </select>

    <!-- 查询热门商品 -->
    <select id="selectHotProducts" resultMap="BaseResultMap">
        SELECT p.*
        FROM products p
                 JOIN (SELECT product_id, COUNT(*) as count
                       FROM order_item
                       GROUP BY product_id
                       ORDER BY count DESC
                       LIMIT #{limit}) hot ON p.id = hot.product_id
        WHERE p.status = 1
        ORDER BY hot.count DESC
    </select>


    <!-- 批量插入商品 -->
    <insert id="batchInsertProducts">
        INSERT INTO products (category_id, name, description, price, stock, images, create_time, update_time, status)
        VALUES
        <foreach collection="productList" item="product" separator=",">
            (#{product.categoryId}, #{product.name}, #{product.description},
            #{product.price}, #{product.stock}, #{product.images},
            NOW(), NOW(), #{product.status})
        </foreach>
    </insert>

    <!-- 减少商品库存 -->
    <update id="decreaseStock">
        UPDATE products
        SET stock       = stock - #{quantity},
            update_time = NOW()
        WHERE id = #{id}
          AND stock >= #{quantity}
    </update>

    <!-- 查询推荐商品 -->
    <select id="selectRecommendProducts" resultMap="BaseResultMap">
        SELECT p.*
        FROM products p
                 JOIN (SELECT product_id, COUNT(*) as view_count
                       FROM user_behavior
                       WHERE behavior_type IN (1, 2, 3) -- 浏览、收藏、购买行为
                       GROUP BY product_id
                       ORDER BY view_count DESC
                       LIMIT #{limit}) r ON p.id = r.product_id
        WHERE p.status = 1
        ORDER BY r.view_count DESC
    </select>

    <!-- 查询新品 -->
    <select id="selectNewProducts" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE status = 1
        AND create_time > DATE_SUB(NOW(), INTERVAL #{days} DAY)
        ORDER BY create_time DESC
        LIMIT #{limit}
    </select>


    <!-- 全文搜索商品 -->
    <select id="fullTextSearch" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE status = 1
        AND (
        name LIKE CONCAT('%', #{keyword}, '%')
        OR description LIKE CONCAT('%', #{keyword}, '%')
        )
        ORDER BY
        CASE
        WHEN name LIKE CONCAT(#{keyword}, '%') THEN 1
        WHEN name LIKE CONCAT('%', #{keyword}, '%') THEN 2
        ELSE 3
        END,
        create_time DESC
    </select>

    <!-- 增加商品库存 -->
    <update id="increaseStock">
        UPDATE products
        SET stock       = stock + #{quantity},
            update_time = NOW()
        WHERE id = #{id}
    </update>

    <!-- 批量更新商品状态 -->
    <update id="batchUpdateStatus">
        UPDATE products
        SET status = #{status},
        update_time = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <!-- 统计商品销量排行 -->
    <select id="getProductSalesRanking" resultType="java.util.Map">
        SELECT
        p.id,
        p.name,
        p.price,
        SUM(oi.quantity) as sales_count,
        SUM(oi.quantity * oi.price) as sales_amount
        FROM products p
        JOIN order_item oi ON p.id = oi.product_id
        JOIN orders o ON oi.order_id = o.id
        WHERE o.order_status >= 3 -- 已支付的订单
        <if test="startDate != null">
            AND o.pay_time >= #{startDate}
        </if>
        GROUP BY p.id, p.name, p.price
        ORDER BY sales_count DESC
        LIMIT #{limit}
    </select>

    <!-- 获取完整商品详情 -->
    <select id="selectProductDetail" resultMap="BaseResultMap">
        SELECT p.*,
               c.name                      as category_name,
               COALESCE(r.avg_rating, 0)   as rating,
               COALESCE(r.review_count, 0) as review_count,
               COALESCE(s.sales_count, 0)  as sales_count
        FROM products p
                 LEFT JOIN category c ON p.category_id = c.id
                 LEFT JOIN (SELECT product_id,
                                   COUNT(*)    as review_count,
                                   AVG(rating) as avg_rating
                            FROM product_review
                            GROUP BY product_id) r ON p.id = r.product_id
                 LEFT JOIN (SELECT product_id,
                                   SUM(quantity) as sales_count
                            FROM order_item
                            GROUP BY product_id) s ON p.id = s.product_id
        WHERE p.id = #{id}
    </select>
</mapper>
